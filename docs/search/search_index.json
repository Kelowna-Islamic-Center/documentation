{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kelowna Islamic Center Project Overview","text":"<p>As-salamu alaykum.</p> <p>Welcome to the Kelowna Islamic Center (KIC) documentation. This project covers all digital systems used by KIC to provide the community with prayer times, announcements, and notifications across multiple platforms.  </p> <p>The purpose of this documentation is to help developers, contributors, and administrators understand the full ecosystem and each component of the project.</p>"},{"location":"#project-components","title":"Project Components","text":"<p>The KIC project consists of three main interconnected components, each maintained in its own repository:</p>"},{"location":"#1-server-side-cloud-functions","title":"1. Server-Side Cloud Functions","text":"<p>The server-side infrastructure is built using Firebase Cloud Functions. It manages:</p> <ul> <li>Prayer Reminders: Automated scheduling of Adhan and Iqamah notifications for each prayer time.  </li> <li>Announcements: Event-driven notifications sent when new announcements are created.</li> <li>Cloud Messaging: Delivery of notifications to the mobile apps.  </li> </ul> <p>Previous versions relied on a PHP server; the migration to Cloud Functions was made to reduce maintenance and administration overhead, as no traditional managed server is required.</p>"},{"location":"#2-mobile-app","title":"2. Mobile App","text":"<p>The KIC Mobile App is the most widely used application and is the community-facing client, available on the Play Store and App Store. It allows users to:</p> <ul> <li>Receive push notifications for prayer times and announcements.  </li> <li>Access community information and upcoming events.  </li> <li>Admins can create announcements and manage community engagement.</li> </ul> <p>The mobile app communicates with Firestore and the server-side Cloud Functions to receive real-time updates.</p>"},{"location":"#3-kiosk-app","title":"3. Kiosk App","text":"<p>The KIC Kiosk App is deployed on display kiosks in the main hall of the Masjid, replacing traditional manual wall prayer clocks.  </p> <p>It provides:</p> <ul> <li>Real-time prayer times with Adhan and Iqamah updates, fully synced and requiring no maintenance.</li> <li>An announcements carousel that cycles through community announcements synced from Firestore.</li> </ul> <p>The kiosk app is built as a SvelteKit-powered web application that runs in a browser, making it cross-platform and able to run on any display device.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To explore the project, follow these steps:</p> <ol> <li>Read the Architecture section to understand data flow and notification mechanisms.</li> <li>Read the Server-Side Functions section to understand backend workflows.</li> <li>Check the Mobile App section for client-facing functionality.</li> <li>Explore the Kiosk App section for deployment and installation instructions.</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>All projects documented here, including this documentation itself, are open source under the GPL-v3 license and are available on GitHub.</p> <p>Contributions are welcome, whether to add new features, create your own version, or adapt it for use in a Masjid outside of Kelowna Islamic Center.</p> <p>This overview serves as your starting point for understanding the full KIC system. Each section contains detailed guides for installation, deployment, and development to help contributors get up and running quickly.</p>"},{"location":"architecture/application-architecture/","title":"Kelowna Islamic Center Application Architecture","text":"<p>The KIC ecosystem is built as a modular, event-driven system with the following key characteristics:</p> <ul> <li>Serverless backend powered by Firebase Cloud Functions, handling notifications, prayer times, and announcements.</li> <li>Real-time synchronization of announcements via Firestore, ensuring all client apps stay automatically up to date.</li> <li>Cross-platform frontends:<ul> <li>Flutter Mobile App for community members (Android/iOS)</li> <li>Web Kiosk App for Masjid display screens</li> </ul> </li> </ul>"},{"location":"architecture/application-architecture/#high-level-components","title":"High-Level Components","text":""},{"location":"architecture/application-architecture/#firebase-cloud-functions-server-side","title":"Firebase Cloud Functions (Server-Side)","text":"<p>Cloud Functions serve as the backend layer, managing all server-side logic. They interact with Firestore, Firebase Cloud Messaging (FCM), and external APIs (such as BCMA and Islamic Finder), providing clean and easily controlable data for the clients.</p>"},{"location":"architecture/application-architecture/#clients-mobile-app-kiosk-app","title":"Clients (Mobile App, Kiosk App)","text":"<p>The clients are the user-facing applications: the mobile app and the kiosk app. Both connect exclusively through Firebase services such as Cloud Functions, Firestore, and FCM, keeping the front-end architecture lightweight and maintainable.</p>"},{"location":"architecture/application-architecture/#architecture-diagram","title":"Architecture Diagram","text":"<p>The overall architecture is illustrated below:</p> <p></p> <p>The diagram may seem complex at first, but as you read through the rest of the documentation, it will become increasingly easier to understand.</p>"},{"location":"kiosk-app/","title":"Kiosk App Overview","text":"<p>The KIC Kiosk App is a SvelteKit-based web application deployed on dedicated display kiosks inside the masjid.</p> <p>Its purpose is to provide the community with real-time athan and iqamah times aswell as announcements all in a modern and automated format that syncs with the mobile app.</p> <p>The previous solution to prayer time displays at the masjid was with a manual digital clock that would require adjustment every week or so. The kiosk app replaces this system with a centrally managed, cloud solution that automatically syncs prayer times and announcmeents from the server.</p> <p>You can find the full source code for the kiosk app on Github:</p> <p> Kelowna-Islamic-Center/kiosk</p>"},{"location":"kiosk-app/#key-features","title":"Key Features","text":"<ul> <li> <p>Prayer Times Display   Shows both adhan and iqamah times, updated daily via the Cloud Functions scheduler.</p> </li> <li> <p>Announcements Carousel   Displays community announcements synced from Firestore.</p> </li> <li> <p>Live Updates   No need for daily adjustments\u2014times and messages are synced automatically.</p> </li> <li> <p>Cross-Platform   Since the kiosk app is a web application it can be deployed on windows and linux powered kiosk computers allowing Deployed via Firebase Hosting with SSR, but optimized for kiosk displays in the masjid.</p> </li> </ul>"},{"location":"kiosk-app/#developement","title":"Developement","text":"<p>The app is deployed using Firebase Hosting with SSR. For installation and deployment instructions, see:</p> <ul> <li>Installation </li> <li>Deployment </li> </ul>"},{"location":"kiosk-app/deployment/","title":"Deployment","text":"<p>The KIC Kiosk App is deployed using Firebase Hosting with Server-Side Rendering (SSR) via SvelteKit\u2019s Firebase adapter.</p> <p>This guide explains how to deploy the app, best practices for managing Firebase config files, and how to regenerate them if needed.</p>"},{"location":"kiosk-app/deployment/#prerequisites","title":"Prerequisites","text":"<p>Before deploying, ensure you have the following:</p> <ul> <li>Firebase project created in the Firebase Console</li> <li>Firebase CLI installed globally:</li> </ul> <pre><code>npm install -g firebase-tools\n</code></pre> <ul> <li>You are logged into Firebase with your Google account:</li> </ul> <pre><code>firebase login\n</code></pre>"},{"location":"kiosk-app/deployment/#regenerating-config-files","title":"Regenerating Config Files","text":"<p>Note</p> <p>This section can be skipped if you are deploying to the production Firebase project as a maintainer and not your own Firebase project.</p> <p>If you need to deploy this repo to a new Firebase project, you must regenerate the Firebase configuration files. These files are part of the repository and have the default values for the production Firebase project.</p> <ol> <li>Initialize Firebase in your project:</li> </ol> <p><code>firebase init hosting</code></p> <ol> <li> <p>Choose the correct Firebase project from the list (or create a new one).</p> </li> <li> <p>When prompted select Configure as a single-page app = Yes (important for SvelteKit SSR rewrites) and overwrite <code>firebase.json</code> and <code>.firebaserc</code> for the new config files.</p> </li> </ol> <p>This will generate new <code>firebase.json</code> and <code>.firebaserc</code> files linked to your selected Firebase project.</p>"},{"location":"kiosk-app/deployment/#environment-variables","title":"Environment Variables","text":"<p>Note</p> <p>This section can be skipped if you are deploying to the production Firebase project as a maintainer and not your own Firebase project.</p> <p>The <code>.env</code> file values created during Installation must also be modified if you are for your own Firebase project.</p> <p>If you set them to the correct Firebase project values during installation then this part can be skipped. Otherwise the following values must be updated to match the project you initialized in the previous step.</p> <pre><code>PUBLIC_FB_API_KEY=\"...\"\nPUBLIC_FB_AUTH_DOMAIN=\"...\"\nPUBLIC_FB_PROJECT_ID=\"...\"\nPUBLIC_FB_STORAGE_BUCKET=\"...\"\nPUBLIC_FB_MESSAGING_SENDER_ID=\"...\"\nPUBLIC_FB_APP_ID=\"...\"\n</code></pre>"},{"location":"kiosk-app/deployment/#deployment-steps","title":"Deployment Steps","text":"<p>1. Build the project</p> <p>Compile the SvelteKit app for production:</p> <pre><code>npm run build\n</code></pre> <p>2. Deploy to Firebase Hosting</p> <pre><code>firebase deploy\n</code></pre> <p>If you are deploying to the production Firebase project then the app should be live at kelownaislamiccenter.web.app. If you deployed to your own project, you can find the deployment URL in the Firebase console.</p> <p>\ud83c\udf89 Congratulations, the kiosk app should be deployed. You can now refresh any Masjid display screens configured to use it.</p>"},{"location":"kiosk-app/display-guide/","title":"Kiosk Displays Setup Guide (WIP)","text":"<p>TODO: This guide should explain how to setup a kiosk display in the masjid to display the kiosk app.</p>"},{"location":"kiosk-app/installation/","title":"Installation","text":"<p>The KIC Kiosk App is built with SvelteKit and Vite. This guide walks you through setting up the development environment and running the app locally.</p> <p>Before starting, ensure you have Node.js 18+ installed.</p>"},{"location":"kiosk-app/installation/#setup","title":"Setup","text":"<p>1. Clone the Repository</p> <pre><code>git clone https://github.com/Kelowna-Islamic-Center/kiosk\n</code></pre> <p>2. Install Dependencies</p> <pre><code>npm install\n</code></pre> <p>3. Configure Environment Variables</p> <p>Copy the <code>.env.example</code> file and rename it to <code>.env</code> in the project root. This file stores all your environment variables such as API and Firebase configuration values that the app needs to run.</p> <p>Example <code>.env</code>:</p> <pre><code>PUBLIC_API_LINK=\"https://prayertimesfetch-ilgk6gl75q-uc.a.run.app\"\n\nPUBLIC_FB_API_KEY=\"myapikey\"\nPUBLIC_FB_AUTH_DOMAIN=\"myproject.firebaseapp.com\"\nPUBLIC_FB_PROJECT_ID=\"myproject\"\nPUBLIC_FB_STORAGE_BUCKET=\"myproject.appspot.com\"\nPUBLIC_FB_MESSAGING_SENDER_ID=\"mysenderid\"\nPUBLIC_FB_APP_ID=\"myfbappid\"\n</code></pre> <p>Danger</p> <p>In SvelteKit, only variables starting with <code>PUBLIC_</code> are exposed to client-side code. Do not put private keys (like Firebase service account credentials) in <code>.env</code>.</p>"},{"location":"kiosk-app/installation/#development","title":"Development","text":"<p>To start the development server with hot-reloading:</p> <pre><code>npm run dev\n</code></pre> <p>By default, the app will be available at:</p> <pre><code>http://localhost:5173\n</code></pre>"},{"location":"kiosk-app/installation/#build-for-production","title":"Build for Production","text":"<p>To create an optimized production build:</p> <pre><code>npm run build\n</code></pre> <p>Preview the production build locally with:</p> <pre><code>npm run preview\n</code></pre>"},{"location":"kiosk-app/installation/#linting-type-checking","title":"Linting &amp; Type Checking","text":"<p>Run static analysis and type checks to catch issues early:</p> <pre><code>npm run check\n</code></pre> <p>Or run in watch mode:</p> <pre><code>npm run check:watch\n</code></pre>"},{"location":"kiosk-app/installation/#notes","title":"Notes","text":"<ul> <li>The app uses SvelteKit + Vite with TypeScript enabled.</li> <li>Styles are built using Sass (<code>.scss</code> files supported).</li> <li>Ensure your <code>.env</code> file is properly configured before starting development or building for production.</li> <li>The kiosk fetches prayer times from the configured <code>PUBLIC_API_LINK</code> and integrates with Firebase services for data and messaging.</li> </ul>"},{"location":"mobile-app/development/installation/","title":"Mobile App Installation Guide","text":"<p>This guide will walk you through setting up a complete development environment to contribute to the app. It covers installation of Flutter, Android and iOS development tools, and Firebase configuration.</p> <p>By the end of this guide, you\u2019ll have a fully working local development setup, ready to build and run the app on Android and iOS devices.</p>"},{"location":"mobile-app/development/installation/#pre-requisites","title":"Pre-requisites","text":"<p>Before installing, ensure you have Visual Studio Code (VS Code) installed locally.</p> <p>While you may use other editors, this guide and the rest of the documentation are written for VS Code and its strongly recommended.</p>"},{"location":"mobile-app/development/installation/#1-install-flutter-sdk","title":"1. Install Flutter SDK","text":"<p>Note</p> <p>This guide is adapted from the official Flutter installation guide.  Follow the official guide if this section does not work for you.</p> VS Code Installation (Recommended)Manual Installation <ol> <li>Launch VS Code with the mobile repo open</li> <li>Add the Flutter extension to VS Code</li> <li>Once installed, open the command palette in VS Code (Go to View &gt; Command Palette or press CTRL/Command + Shift + P)</li> <li>In the command palette, type flutter and Select Flutter: Run Flutter Doctor</li> <li>VS Code prompts you to locate the Flutter SDK on your computer. Select Download SDK.</li> <li> <p>When the Select Folder for Flutter SDK dialog displays, choose where you want to install Flutter.</p> macOS / LinuxWindows <p>Select a folder like <code>~/development/flutter</code></p> <p>Select a folder like <code>C:/Users/{YourUser}/development/flutter</code></p> </li> <li> <p>Click Clone Flutter. This download takes a few minutes. If you suspect that the download has hung, click Cancel then start the installation again.</p> </li> <li>Once installed, click \"Add SDK to PATH\".</li> <li>To ensure you installed Flutter correctly, run     <pre><code>flutter doctor -v\n</code></pre></li> </ol> <ol> <li> <p>Download the latest stable Flutter SDK from the official site: Flutter Installation</p> </li> <li> <p>Extract the Flutter SDK to a permanent location on your machine where you can find it.</p> macOS / LinuxWindows <p>Extract to a folder like <code>~/development/flutter</code></p> <p>Extract to a folder like <code>C:/Users/{YourUser}/development/flutter</code></p> </li> <li> <p>Add Flutter to your system <code>PATH</code>.</p> macOS / LinuxWindows <pre><code>export PATH=\"$PATH:`pwd`~/development/flutter/bin\"\n</code></pre> <pre><code>setx PATH \"%PATH%;C:\\Users\\{YourUser}\\development\\flutter\\bin\"\n</code></pre> </li> <li> <p>Verify installation:</p> <pre><code>flutter doctor\n</code></pre> </li> <li> <p>Install the VS Code Flutter and Dart extensions</p> </li> </ol>"},{"location":"mobile-app/development/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Run the following to install project dependencies:</p> <pre><code>flutter pub get\n</code></pre> <p>After that is setup, configure either an Android environment, iOS environment, or both.</p>"},{"location":"mobile-app/development/installation/#3-android-development-setup","title":"3. Android Development Setup","text":""},{"location":"mobile-app/development/installation/#install-android-studio","title":"Install Android Studio","text":"<ol> <li>Download and install Android Studio.</li> <li>Open Android Studio and install:<ul> <li>Android SDK</li> <li>Android SDK Platform</li> <li>Android Virtual Device (AVD)</li> </ul> </li> <li> <p>Accept the android licenses:</p> <pre><code>flutter doctor --android-licenses\n</code></pre> <p>If this doesn't work, ensure that you have the Android SDK added to your <code>PATH</code>.</p> </li> <li> <p>Verify that android is configured properly by running <code>flutter doctor</code> and looking for a checkmark next to Android.</p> </li> <li>In Android Studio, create an emulator device targeting the latest Android release</li> <li>Close Android Studio and launch VS Code. You are now ready to test on and build for Android.</li> </ol>"},{"location":"mobile-app/development/installation/#4-ios-development-setup-macos-only","title":"4. iOS Development Setup (macOS Only)","text":"<p>iOS development requires a macOS machine with Xcode installed.</p>"},{"location":"mobile-app/development/installation/#install-xcode","title":"Install Xcode","text":"<ol> <li>Download from the Mac App Store.</li> <li>Open Xcode, agree to the license, and allow Xcode to finish installing all of its development components.</li> <li>Install command-line tools: <code>xcode-select --install</code></li> </ol>"},{"location":"mobile-app/development/installation/#install-cocoapods","title":"Install CocoaPods","text":"<p>CocoaPods manages iOS dependencies.</p> <pre><code>sudo gem install cocoapods\n</code></pre> <p>Verify installation:</p> <pre><code>pod --version\n</code></pre> <p>Close Xcode and launch VS Code. You are now ready to test on and build for iOS.</p>"},{"location":"mobile-app/development/installation/#5-firebase-setup","title":"5. Firebase Setup","text":"<p>You now need to configure the app to connect to your firebase project. The mobile app uses FlutterFire which must be configured and run through the root of your project. This part should ideally be done in VS Code through its built in terminal.</p>"},{"location":"mobile-app/development/installation/#step-1-install-flutterfire-cli","title":"Step 1. Install FlutterFire CLI","text":"<p>The FlutterFire CLI configures Firebase for your app:</p> <pre><code>dart pub global activate flutterfire_cli\n</code></pre> <p>Add it to your <code>PATH</code>:</p> macOS / LinuxWindows <pre><code>export PATH=\"$PATH\":\"$HOME/.pub-cache/bin\"\n</code></pre> <pre><code>setx PATH \"$($env:Path);$HOME\\.pub-cache\\bin\"\n</code></pre>"},{"location":"mobile-app/development/installation/#step-2-configure-firebase-project","title":"Step 2. Configure Firebase Project","text":"<p>From the project root, run:</p> <pre><code>flutterfire configure\n</code></pre> <ul> <li>Select your Firebase project (<code>kelownaislamiccenter</code> if you have access to the production project).</li> <li>Enable Android and iOS platforms.</li> <li>This generates a <code>firebase_options.dart</code> file inside <code>lib/</code>. This is an environment file and is automatically ignored by git, do not commit this file.</li> </ul>"},{"location":"mobile-app/development/installation/#step-3-add-firebase-config-files","title":"Step 3. Add Firebase Config Files","text":"<p>Download the following files from the Firebase Console:</p> <ul> <li><code>google-services.json</code> \u2192 Place in <code>android/app/</code>.</li> <li><code>GoogleService-Info.plist</code> \u2192 Place in <code>ios/Runner/</code>.</li> </ul> <p>FlutterFire should now be configured properly and the app should function properly now.</p>"},{"location":"mobile-app/development/installation/#6-run-the-app","title":"6. Run the App","text":"VS Code (Recommended)Manual <ol> <li>Open the <code>lib/main.dart</code> file in the editor</li> <li>Press the play button the top right. If the button does not appear then you do not have the Flutter VS Code extension installed properly.</li> <li>Connect a Physical Android or iOS device or select an iOS simulator/ Android emulator.</li> <li>Wait for the app to build and dependencies to install (can take a while on first setup) after which the app should launch.</li> </ol> <ol> <li>Connect a Physical Android or iOS device or launch an iOS simulator/ Android emulator.</li> <li> <p>Run the following command and leave it running in the background</p> <pre><code>flutter run\n</code></pre> </li> </ol>"},{"location":"mobile-app/development/installation/#8-verify-installation","title":"8. Verify Installation","text":"<p>Run <code>flutter doctor</code> again and ensure all checks pass:</p> <pre><code>flutter doctor\n</code></pre> <p>You should see green checkmarks for Flutter, Android toolchain (if you configured Android), iOS toolchain (if you configured iOS), and connected devices.</p>"},{"location":"mobile-app/development/installation/#9-troubleshooting","title":"9. Troubleshooting","text":""},{"location":"mobile-app/development/installation/#flutter-sdk-not-found","title":"Flutter SDK not found","text":"<p>Make sure you added <code>flutter/bin</code> to your system <code>PATH</code> and restart your terminal/IDE.</p>"},{"location":"mobile-app/development/installation/#android-emulator-not-showing-up","title":"Android Emulator not showing up","text":"<ul> <li>In Android Studio \u2192 Tools \u2192 Device Manager, create a new Virtual Device (AVD).</li> <li>Ensure the emulator is started before running <code>flutter run</code>.</li> </ul>"},{"location":"mobile-app/development/installation/#cocoapods-not-installed-ios","title":"CocoaPods not installed (iOS)","text":"<p>If <code>flutter doctor</code> reports CocoaPods missing, reinstall:</p> <pre><code>sudo gem install cocoapods\ncd ios\npod install\n</code></pre>"},{"location":"mobile-app/development/installation/#android-sdk-not-found","title":"Android SDK not found","text":"<p>Check that <code>ANDROID_HOME</code> points to the correct directory. For most installations:</p> <ul> <li>macOS/Linux \u2192 <code>$HOME/Library/Android/sdk</code></li> <li>Windows \u2192 <code>C:\\Users\\&lt;username&gt;\\AppData\\Local\\Android\\sdk</code></li> </ul> <p>You should now be ready to begin development on the KIC mobile app.</p>"},{"location":"server-side/","title":"Back-end Architecture Overview","text":"<p>The server-side of the Kelowna Islamic Center (KIC) ecosystem is powered by Firebase Cloud Functions, Firestore, and Cloud Tasks.  </p> <p>These backend services handle the automation, scheduling, and delivery of notifications and content to the mobile app, web kiosk, and other client platforms.</p> <p>This section of the documentation provides a complete reference for how these server-side processes work, how they are structured, and how to extend or troubleshoot them.</p>"},{"location":"server-side/#purpose-of-server-side-functions","title":"Purpose of Server-Side Functions","text":"<p>The KIC mobile and web platforms rely on accurate, timely, and consistent information. Server-side functions ensure that:</p> <ul> <li>Prayer reminders are fetched, scheduled, and delivered without manual intervention.</li> <li>Announcements are instantly broadcast to the community when new updates are posted.</li> <li>Notifications are localized to user preffered languages and properly routed to users who have opted in.</li> <li>System complexity (timezones, retries, scheduling, and message formatting) is all handled automatically in the backend.</li> </ul>"},{"location":"server-side/#key-components","title":"Key Components","text":"<p>1. Get Prayer Times</p> <ul> <li>Fetches latest Athan and Iqamah times accurately for each prayer.</li> <li>Resolve prayer times based on selected calculation method. </li> <li>See: Prayer Times API</li> </ul> <p>2. Announcements</p> <ul> <li>Firestore-backed system for storing announcements.  </li> <li>Automatically triggers notifications when new announcements are created.  </li> <li>See: Announcements</li> </ul> <p>3. Prayer Reminders</p> <ul> <li>Daily scheduler (<code>prayerTimesAlertScheduler</code>) fetches and queues reminders.  </li> <li>Task queue processor (<code>sendPrayerAlert</code>) dispatches localized push notifications for Athan and Iqamah.  </li> <li>See: Prayer Reminders</li> </ul> <p>4. Supporting Infrastructure</p> <ul> <li>Firestore \u2013 Persistent storage of announcements.  </li> <li>Cloud Tasks \u2013 Time-precise delivery of prayer notifications.  </li> <li>Cloud Messaging (FCM) \u2013 Notification delivery to mobile apps.</li> </ul>"},{"location":"server-side/#developer-notes","title":"Developer Notes","text":"<ul> <li>All notifications are topic-based (<code>announcements</code>, <code>athanAlert</code>, <code>iqamah*MinuteAlert</code>, etc.), giving clients granular control over what to subscribe to.</li> <li>Timezones are managed differently on client where it is local masjid time (<code>America/Vancouver</code>) and the server where it is server region (<code>America/Chicago</code>).</li> <li>Functions are written to fail gracefully (e.g., no notification if config is missing, retries for transient errors).</li> <li>This system is event-driven and fully automated \u2014 once deployed and configured, minimal admin intervention is needed.</li> </ul>"},{"location":"server-side/#next-steps","title":"Next Steps","text":"<p>Explore each feature in detail:</p> <ul> <li>Cloud Functions Overview</li> <li>Prayer Times API</li> <li>Announcements </li> <li>Prayer Reminders</li> </ul>"},{"location":"server-side/announcements/","title":"Announcements","text":"<p>The announcements system is used by KIC to keep the community informed about events, updates, or important notices. Announcements can be found in the announcments tab on the mobile app or on the sliding carousel on the kiosk display.</p> <p>They are stored in a Firestore database and automatically trigger notifications to client applications whenever a new announcement is added.</p> <p>Admins can create announcements within the Mobile App's admin tools and specify which platforms (mobile or web) will receive the announcmenet. </p> <p>This guide explains how announcements are structured, stored, and delivered through Cloud Functions.</p>"},{"location":"server-side/announcements/#firestore-storage","title":"Firestore Storage","text":"<p>All created announcements are stored in a Firestore collection under:</p> <pre><code>/announcements/{docId}\n</code></pre> <p>Each announcement document contains the following fields:</p> Field Type Description <code>title</code> string The title of the announcement <code>description</code> string The full content of the announcement <code>platforms</code> array Platforms to notify (e.g., <code>[\"mobile\"]</code>, <code>[\"web\"]</code>, or <code>[\"web\", \"mobile\"]</code>). If missing or invalid, ignored. <code>timeStamp</code> timestamp Server-generated timestamp automatically set when the announcement is added. Don't set this manually."},{"location":"server-side/announcements/#how-announcments-are-sent","title":"How Announcments are Sent","text":"<p>The <code>announcementAlert</code> function manages the full lifecycle of announcements. This works in the following steps:</p> <p>1. Create Announcement</p> <p>When a new document is added to <code>/announcements</code>, the <code>announcementAlert</code> Cloud Function triggers.</p> <p>Example Firestore entry:</p> <pre><code>{\n    \"title\": \"Community Dinner\",\n    \"description\": \"Join us for a community dinner this Friday after Maghrib.\",\n    \"platforms\": [\"mobile\"]\n}\n</code></pre> <p>2. Notification Processing</p> <p>The function sets a server-side <code>timeStamp</code> field with a time stamp of when the announcement is created.</p> <p>Notifications are only sent if the <code>platforms</code> array includes <code>\"mobile\"</code>. If the <code>platforms</code> field is missing or not an array, no notification is sent (fails silently).</p> <p>3. Notification Payload</p> <p>A Firebase Cloud Messaging (FCM) payload is generated and sent. This payload is then received by clients that are subscribed to announcements (announcements enabled in settings on mobile).</p> <pre><code>{\n    \"topic\": \"announcements\",\n    \"notification\": {\n        \"title\": \"Community Dinner - New Announcement\",\n        \"body\": \"Join us for a community dinner this Friday after Maghrib.\",\n        \"android_channel_id\": \"announcements_channel\"\n    },\n    \"data\": {\n        \"notificationType\": \"announcements\",\n        \"topic\": \"announcements\"\n    }\n}\n</code></pre>"},{"location":"server-side/announcements/#notes","title":"Notes","text":"<ul> <li>Announcements are event-driven; no manual triggering is required once a document is created.</li> <li>The workflow can be extended in the future to include:<ul> <li>Scheduled or expiring announcements (e.g., auto-remove old announcements).</li> <li>Rich media (images, links) in notifications.</li> </ul> </li> </ul>"},{"location":"server-side/announcements/#common-issues-troubleshooting","title":"Common Issues &amp; Troubleshooting","text":"<p>Here are some common problems you may encounter when working with announcements, and how to resolve them:</p> <p>1. No Notification Sent</p> <ul> <li>Cause: The <code>platforms</code> field is missing or not set to <code>[\"mobile\"]</code>.</li> <li>Fix: Ensure your Firestore document includes <code>\"platforms\": [\"mobile\"]</code>.</li> </ul> <p>2. Timestamp Not Appearing</p> <ul> <li>Cause: The announcement was created manually with a <code>timeStamp</code> field.</li> <li>Fix: Let the function set <code>Timestamp.now()</code> automatically. Remove any manually set values.</li> </ul> <p>3. Invalid Android Channel ID</p> <ul> <li>Cause: The environment variable <code>ANDROID_CHANNEL_ID_ANNOUNCEMENTS</code> was not configured.</li> <li> <p>Fix: Set it using:</p> <pre><code>firebase functions:config:set ANDROID_CHANNEL_ID_ANNOUNCEMENTS=\"announcements_channel\"\n</code></pre> </li> </ul> <p>4. FCM Send Errors in Logs</p> <ul> <li>Cause: Firebase project may not have Cloud Messaging enabled, or credentials are invalid.</li> <li> <p>Fix:</p> <ul> <li>Ensure Firebase Cloud Messaging is enabled in the Firebase Console.</li> <li>Regenerate your service account key if necessary.</li> <li>Check logs with <code>npm run logs</code> for specific error codes.</li> </ul> </li> </ul>"},{"location":"server-side/cloud-functions/","title":"Cloud Functions Overview","text":"<p>This application makes use of Firebase Cloud Functions which is a complete serverless solution that runs on Google Cloud, requiring no server maintenance.</p> <p>The functions are simple JavaScript (JS) functions that are run on the server based on triggers.</p> <p>You can find the full source code for these functions along with all the server-side logic that powers the mobile app, kiosk app, and the backend services for prayer times, announcements, and notifications here:</p> <p> Kelowna-Islamic-Center/cloud-functions</p> <p>Info</p> <p>To learn more about Firebase Cloud Functions read the official Firebase guide.</p>"},{"location":"server-side/cloud-functions/#purpose-of-cloud-functions","title":"Purpose of Cloud Functions","text":"<p>The current cloud functions are responsible for handling all server-side logic such as:</p> <ul> <li>Fetching daily prayer times from The BCMA and Islamic Finder APIs.</li> <li>Scheduling and sending notifications for prayer times (athan and iqamah) and announcements.</li> <li>Serving prayer times via HTTP endpoints to clients.</li> <li>Handling any other server-side logic.</li> </ul> <p>The cloud functions do not handle authentication as Firebase provides the managed Firebase Authentication service which already handles all authentication requests, tokens, etc.</p>"},{"location":"server-side/cloud-functions/#cloud-messaging-notifications","title":"Cloud Messaging Notifications","text":"<p>Cloud functions can also send cloud notifications that are delivered over the internet rather than being locally triggered. These \"cloud notifications\" are handled through Firebase Cloud Messaging (FCM).</p> <p>Clients receive notifications by subscribing to topics. These topics are agreed beforehand and determine which notifications the client will receive. For example, if a mobile app client is subscribed to the <code>announcements</code> topic, it will receive a notification if a cloud function passes a notification payload to FCM that contains the <code>announcements</code> topic.</p> <p>Info</p> <p>To learn more about Firebase Cloud Messaging read the official Firebase guide.</p>"},{"location":"server-side/cloud-functions/#active-functions-summary","title":"Active Functions Summary","text":"<p>The following functions are currently active.</p> <p>Detailed documentation for each function can be found under the \"Cloud Functions Reference\" category or by clicking the links below.</p> Function Type Trigger Purpose <code>announcementAlert</code> Firestore Document created Sends announcement notifications <code>prayerTimesAlertScheduler</code> Scheduled Daily at 07:00 UTC (00:00 PST) Queues prayer notifications <code>sendPrayerAlert</code> Task Queue Dispatched by scheduler (when prayer reminder notification should be sent) Sends localized prayer notifications <code>prayerTimesFetch</code> HTTP GET request Returns structured prayer times"},{"location":"server-side/prayer-reminders/","title":"Prayer Reminders","text":"<p>The Prayer Reminders system delivers sheduled notifications for Athan and Iqamah reminders to the mobile app. These notifications used to be handled locally on device however due to recent software updates on both Android and iOS this has been moved to the cloud to allow for more control over notifications.</p> <p>It\u2019s implemented with two Cloud Functions that work together:</p> <p>Every day at 07:00 UTC (12:00 AM PST) the <code>prayerTimesAlertScheduler</code> function runs and schedules all the notification jobs for the day through Cloud Tasks.</p> <p>Once a its time for notification to be delivered, the notification job is run in Cloud Tasks by running the <code>sendPrayerAlert</code> function which then sends the localized notifications to clients via FCM.</p>"},{"location":"server-side/prayer-reminders/#topics-subscriptions-fcm","title":"Topics &amp; Subscriptions (FCM)","text":"<p>Clients receive reminders by subscribing to topics:</p> <ul> <li>Athan: <code>athanAlert</code></li> <li>Iqamah (reminders): <code>iqamah5MinuteAlert</code>, <code>iqamah10MinuteAlert</code>, <code>iqamah15MinuteAlert</code>, <code>iqamah20MinuteAlert</code>, <code>iqamah30MinuteAlert</code>, <code>iqamah45MinuteAlert</code></li> <li>Language filter: <code>lang-&lt;locale&gt;</code> (e.g., <code>lang-en</code>, <code>lang-ar</code>, \u2026)</li> </ul> <p>Note: Iqamah notifications additionally require users to be on the <code>iqamahAlert</code> topic (opt-in gate).</p>"},{"location":"server-side/prayer-reminders/#important-notes","title":"Important Notes","text":"<ul> <li>Friday handling: When its Friday, the system skips <code>duhr</code> and <code>jumuah</code> is used instead. The opposite behaviour exists on non-friday days.</li> <li>Shurooq is skipped in notification scheduling as it is not a mandatory prayer.</li> <li>Locales: Notification strings are generated per entry in <code>locale.json</code>.</li> <li>Time formatting: All times are in the human-readable format (e.g., <code>1:30 PM</code>).</li> </ul>"},{"location":"server-side/prayer-reminders/#common-issues-troubleshooting","title":"Common Issues &amp; Troubleshooting","text":"<p>1) No notifications are delivered</p> <ul> <li>Cause: Devices aren\u2019t subscribed to the expected topics.  </li> <li>Fix: Ensure the app subscribes users to <code>athanAlert</code> and/or the specific <code>iqamah*MinuteAlert</code> topics, plus <code>lang-&lt;locale&gt;</code>. For iqamah, also require <code>iqamahAlert</code>.</li> </ul> <p>2) Iqamah reminders don\u2019t fire</p> <ul> <li>Cause: Users didn\u2019t opt-in to <code>iqamahAlert</code>, or the minute-specific topic name doesn\u2019t match.  </li> <li>Fix: Verify both <code>iqamahAlert</code> and the minute topic (e.g., <code>iqamah15MinuteAlert</code>) are subscribed.</li> </ul> <p>3) Scheduler doesn\u2019t run</p> <ul> <li>Cause: Cloud Scheduler or required Google Cloud APIs are disabled; billing plan insufficient.  </li> <li>Fix: Enable Cloud Scheduler and Cloud Tasks, ensure Blaze plan if required, and confirm the function is deployed in the intended region.</li> </ul> <p>4) Times look off (early/late)</p> <ul> <li>Cause: Timezone mix-ups between America/Vancouver and America/Chicago conversions.  </li> <li>Fix: Check logs for parsed prayer times and scheduled UTC times. Confirm server region and conversion logic.</li> </ul> <p>5) Missing sounds or channel errors</p> <ul> <li>Cause: Android channel IDs not set, or iOS sound not bundled.  </li> <li>Fix: Set <code>ANDROID_CHANNEL_ID_ATHAN_ALERTS</code> / <code>ANDROID_CHANNEL_ID_IQAMAH_ALERTS</code>. Ensure iOS sound files are included in the app.</li> </ul> <p>6) FCM errors in logs</p> <ul> <li>Cause: Cloud Messaging not enabled or service account permissions incorrect.  </li> <li>Fix: Validate FCM setup in Firebase Console and recheck service account credentials.</li> </ul>"},{"location":"server-side/prayer-times-api/","title":"Prayer Times API","text":"<p>Since the Kelowna Islamic Center is part of the BC Muslim Association (BCMA), all prayer times come directly from the BCMA API. However, this data is not usable directly and needs to be further processed into a JSON format that the mobile app and the kiosk app can better handle.</p> <p>All clients, like the mobile app and the kiosk app, periodically check the KIC API endpoint which is served by the <code>prayerTimesFetch</code> cloud function. This cloud function makes the request to the BCMA API and parses it into a cleaner format that the applications then receive.</p> <p>Note</p> <p>The application architecture supports any API if required, not just the BCMA API. All that is required is that the <code>prayerTimesFetch</code> function be modified to accommodate the new API.</p> <p>Info</p> <p>You can read more about cloud functions and this specific cloud function on the Cloud Functions page.</p>"},{"location":"server-side/prayer-times-api/#the-bcma-api","title":"The BCMA API","text":"<p>The BCMA API endpoint for Kelowna Islamic Center (BCMA Organization 7) is:</p> <pre><code>https://org.thebcma.com/api/Prayertimes/GetPrayertimeByDate?organizationId=7&amp;dt={date}\n</code></pre> <ul> <li><code>{date}</code> formatted as <code>MM-DD-YYYY</code> in Pacific Time. The cloud function, when making its request, is configured to either use today's date or tomorrow's date.</li> </ul>"},{"location":"server-side/prayer-times-api/#response-format","title":"Response Format","text":"<p>The BCMA API responds with a key-only list of prayer times:</p> <pre><code>{\n  \"$id\": \"1\",\n  \"id\": 6444,\n  \"prayerDate\": \"08/26/2022\",\n  \"fajr\": \"4:02:00 AM\",\n  \"fajrIqama\": \"5:00:00 AM\",\n  \"sunrise\": \"6:03:00 AM\",\n  \"zawal\": \"\",\n  \"duhr\": \"1:04:00 PM\",\n  \"duhrIqama\": \"1:30:00 PM\",\n  \"asr\": \"5:48:00 PM\",\n  \"asrIqama\": \"6:15:00 PM\",\n  \"maghreb\": \"8:00:00 PM\",\n  \"maghrebIqama\": \"\",\n  \"isha\": \"9:35:00 PM\",\n  \"ishaIqama\": \"9:50:00 PM\",\n  \"organizationID\": 7,\n  \"calendarDate\": \"2025-08-26T00:00:00\",\n  \"firstJumma\": \"1:30:00 PM\",\n  \"secondJumma\": \"\",\n  \"traveeh\": \"\",\n  \"disclaimer\": null,\n  \"cacheKey\": \"Prayertime_7_8/26/2025 12:00:00 AM\"\n}\n</code></pre> <p>Out of all of these keys, only the essential prayer and iqamah keys are parsed and formatted. The cloud function then also queries the Islamic Finder API for hanbali time, as KIC users use both hanafi and hanbali times (BCMA only provides hanafi).</p> <p>After all processing is complete, the cloud function outputs the following result which is usable by the mobile and kiosk apps.</p> <pre><code>[\n  {\n    \"id\": \"fajr\",\n    \"start\": \"04:02 AM\",\n    \"iqamah\": \"05:00 AM\",\n    \"name\": \"Fajr - \u0627\u0644\u0641\u062c\u0631\"\n  },\n  {\n    \"id\": \"shurooq\",\n    \"start\": \"06:03 AM\",\n    \"iqamah\": \"06:03 AM\",\n    \"name\": \"Shurooq - \u0627\u0644\u0634\u0631\u0648\u0642\"\n  },\n  {\n    \"id\": \"duhr\",\n    \"start\": \"01:04 PM\",\n    \"iqamah\": \"01:30 PM\",\n    \"name\": \"Duhr - \u0627\u0644\u0638\u0647\u0631\"\n  },\n  {\n    \"id\": \"asr\",\n    \"start\": \"05:48 PM\",\n    \"iqamah\": \"06:15 PM\",\n    \"name\": \"Asr - \u0627\u0644\u0639\u0635\u0631\"\n  },\n  {\n    \"id\": \"maghrib\",\n    \"start\": \"08:00 PM\",\n    \"iqamah\": \"08:00 PM\",\n    \"name\": \"Maghrib - \u0627\u0644\u0645\u063a\u0631\u0628\"\n  },\n  {\n    \"id\": \"isha\",\n    \"start\": \"09:35 PM\",\n    \"iqamah\": \"09:50 PM\",\n    \"name\": \"Isha - \u0627\u0644\u0639\u0634\u0627\u0621\"\n  },\n  {\n    \"id\": \"jumuah\",\n    \"start\": \"01:30 PM\",\n    \"iqamah\": \"01:30 PM\",\n    \"name\": \"Jumuah - \u0627\u0644\u062c\u0645\u0639\u0629\"\n  }\n]\n</code></pre> <p>Once again, full documentation of the prayerTimesFetch cloud function is available with details on what parameters the API endpoint accepts and what the output looks like.</p>"},{"location":"server-side/cloud-functions/announcement-alert/","title":"announcementAlert","text":"<p>Type: Firestore Trigger (onDocumentCreated)</p> <p>Path: <code>/announcements/{docId}</code></p>"},{"location":"server-side/cloud-functions/announcement-alert/#description","title":"Description","text":"<p>Triggered whenever a new document is created in the <code>announcements</code> collection.  </p> <p>This function:</p> <ul> <li>Adds a <code>timeStamp</code> field to the new document with the current server time.</li> <li>If the announcement is intended for the mobile platform, it sends a push notification to the announcements topic via Firebase Cloud Messaging.</li> </ul>"},{"location":"server-side/cloud-functions/announcement-alert/#accepted-methods","title":"Accepted Methods","text":"<ul> <li>Trigger: Firestore document creation</li> </ul>"},{"location":"server-side/cloud-functions/announcement-alert/#parameters","title":"Parameters","text":"Name Type Required Description <code>docId</code> string Yes The Firestore document ID of the announcement. <code>platforms</code> string[] No Platforms the announcement applies to. Must include atleast <code>\"mobile\"</code>, <code>\"web\"</code>, or both to trigger notifications. <code>title</code> string Yes The announcement title. <code>description</code> string Yes Announcement body text."},{"location":"server-side/cloud-functions/announcement-alert/#example-notification-payload","title":"Example Notification Payload","text":"<p>This notification payload is sent to Firebase Messaging which delivers it to the mobile apps and the web kiosk app.</p> <pre><code>{\n  \"topic\": \"announcements\",\n  \"notification\": {\n    \"title\": \"{title} - New Announcement\",\n    \"body\": \"{description}\",\n    \"android_channel_id\": \"ANDROID_CHANNEL_ID_ANNOUNCEMENTS\"\n  },\n  \"data\": {\n    \"notificationType\": \"announcements\",\n    \"topic\": \"announcements\"\n  }\n}\n</code></pre>"},{"location":"server-side/cloud-functions/prayer-times-alert-scheduler/","title":"prayerTimesAlertScheduler","text":"<p>Type: Scheduled Function (onSchedule)</p> <p>Schedule: Every day at 07:00 UTC (12:00 AM PST)</p>"},{"location":"server-side/cloud-functions/prayer-times-alert-scheduler/#description","title":"Description","text":"<p>This function runs daily to:</p> <ul> <li>Fetch the prayer times from a configured API.</li> <li>Build notification payloads for athan and iqamah reminders.</li> <li>Schedule tasks in Firebase Task Queues to send the notifications at the appropriate times.</li> </ul>"},{"location":"server-side/cloud-functions/prayer-times-alert-scheduler/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>ANDROID_CHANNEL_ID_ATHAN_ALERTS</code></li> <li><code>ANDROID_CHANNEL_ID_IQAMAH_ALERTS</code></li> <li><code>PRAYER_TIMES_FETCH_URL</code></li> </ul>"},{"location":"server-side/cloud-functions/prayer-times-alert-scheduler/#behavior","title":"Behavior","text":"<ol> <li>Fetches prayer times for the current day.</li> <li>Excludes Shurooq.</li> <li>On Fridays:</li> <li>Excludes Duhr</li> <li>Includes Jumuah</li> <li>Converts times to America/Chicago (server timezone).</li> <li>Enqueues payloads into the task queue for <code>sendPrayerAlert</code>.</li> </ol>"},{"location":"server-side/cloud-functions/prayer-times-alert-scheduler/#example-task-payload","title":"Example Task Payload","text":"<p>This task payload is later parsed by sendPrayerAlert when it is activated by the cloud scheduler. It provides it with context on what notification to send and where to send it when it is activated.</p> <pre><code>{\n  \"id\": \"fajr\",\n  \"type\": \"iqamah\",\n  \"androidChannel\": \"ANDROID_CHANNEL_ID_IQAMAH_ALERTS\",\n  \"topic\": \"iqamah5MinuteAlert\",\n  \"minutes\": 5,\n  \"time\": \"2025-08-26T05:45:00.000Z\"\n}\n</code></pre>"},{"location":"server-side/cloud-functions/prayer-times-fetch/","title":"prayerTimesFetch","text":"<p>Type: HTTP Function (onRequest)</p> <p>Endpoint: <code>prayertimesfetch-ilgk6gl75q-uc.a.run.app/</code></p>"},{"location":"server-side/cloud-functions/prayer-times-fetch/#description","title":"Description","text":"<p>Provides daily prayer times formatted for the app. Supports fetching today's or tomorrow's prayer times and handles Asr time according to the selected madhhab.</p>"},{"location":"server-side/cloud-functions/prayer-times-fetch/#query-parameters","title":"Query Parameters","text":"Name Required Values Description <code>day</code> No <code>today</code> (default), <code>tomorrow</code> Selects whether to fetch today's or tomorrow's times. <code>method</code> No <code>hanafi</code>, <code>hanbali</code> If <code>\"hanbali\"</code> is provided, Asr time is fetched from IslamicFinder API. If nothing provided, <code>hanafi</code> is automatically assumed."},{"location":"server-side/cloud-functions/prayer-times-fetch/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>API_LINK</code> \u2013 Base URL for BCMA prayer times</li> <li><code>ISLAMIC_FINDER_API_LINK</code> \u2013 Base URL for IslamicFinder API</li> </ul>"},{"location":"server-side/cloud-functions/prayer-times-fetch/#response-format","title":"Response Format","text":"<p>An array of objects:</p> Field Type Description <code>id</code> string Prayer ID (e.g. <code>fajr</code>, <code>isha</code>) <code>start</code> string Athan time (HH:mm A) <code>iqamah</code> string Iqamah time (HH:mm A) <code>name</code> string English + Arabic prayer name"},{"location":"server-side/cloud-functions/prayer-times-fetch/#example-http-response","title":"Example HTTP Response","text":"<pre><code>[\n  {\n    \"id\": \"fajr\",\n    \"start\": \"04:02 AM\",\n    \"iqamah\": \"05:00 AM\",\n    \"name\": \"Fajr - \u0627\u0644\u0641\u062c\u0631\"\n  },\n  {\n    \"id\": \"shurooq\",\n    \"start\": \"06:03 AM\",\n    \"iqamah\": \"06:03 AM\",\n    \"name\": \"Shurooq - \u0627\u0644\u0634\u0631\u0648\u0642\"\n  },\n  {\n    \"id\": \"duhr\",\n    \"start\": \"01:04 PM\",\n    \"iqamah\": \"01:30 PM\",\n    \"name\": \"Duhr - \u0627\u0644\u0638\u0647\u0631\"\n  },\n  {\n    \"id\": \"asr\",\n    \"start\": \"05:48 PM\",\n    \"iqamah\": \"06:15 PM\",\n    \"name\": \"Asr - \u0627\u0644\u0639\u0635\u0631\"\n  },\n  {\n    \"id\": \"maghrib\",\n    \"start\": \"08:00 PM\",\n    \"iqamah\": \"08:00 PM\",\n    \"name\": \"Maghrib - \u0627\u0644\u0645\u063a\u0631\u0628\"\n  },\n  {\n    \"id\": \"isha\",\n    \"start\": \"09:35 PM\",\n    \"iqamah\": \"09:50 PM\",\n    \"name\": \"Isha - \u0627\u0644\u0639\u0634\u0627\u0621\"\n  },\n  {\n    \"id\": \"jumuah\",\n    \"start\": \"01:30 PM\",\n    \"iqamah\": \"01:30 PM\",\n    \"name\": \"Jumuah - \u0627\u0644\u062c\u0645\u0639\u0629\"\n  }\n]\n</code></pre>"},{"location":"server-side/cloud-functions/send-prayer-alert/","title":"sendPrayerAlert","text":"<p>Type: Task Queue Function (onTaskDispatched)</p>"},{"location":"server-side/cloud-functions/send-prayer-alert/#description","title":"Description","text":"<p>Handles queued payloads created by <code>prayerTimesAlertScheduler</code> and sends localized push notifications for athan and iqamah reminders.</p>"},{"location":"server-side/cloud-functions/send-prayer-alert/#retry-and-rate-limits","title":"Retry and Rate Limits","text":"<ul> <li>Retries: max 3 attempts</li> <li>Backoff: 30 seconds minimum</li> <li>Max concurrent dispatches: 5</li> </ul>"},{"location":"server-side/cloud-functions/send-prayer-alert/#payload-parameters","title":"Payload Parameters","text":"Name Type Description <code>id</code> string Prayer ID (<code>fajr</code>, <code>duhr</code>, <code>asr</code>, <code>maghrib</code>, <code>isha</code>, <code>jumuah</code>) <code>type</code> string <code>\"athan\"</code> or <code>\"iqamah\"</code> <code>androidChannel</code> string Android notification channel ID <code>topic</code> string FCM topic name <code>minutes</code> number Minutes before iqamah (if applicable) <code>time</code> Date Scheduled notification time"},{"location":"server-side/cloud-functions/send-prayer-alert/#notification-behavior","title":"Notification Behavior","text":"<ul> <li>Sends a localized notification for each supported locale.</li> <li>Uses <code>locale.json</code> to translate prayer names and notification text.</li> <li>Plays Athan sound for athan notifications (<code>athan_full</code> on Android, <code>athan_short.caf</code> on iOS).</li> </ul>"},{"location":"server-side/cloud-functions/send-prayer-alert/#example-notification-payload","title":"Example Notification Payload","text":"<p>This notification payload is sent to Firebase Messaging which delivers it to the mobile apps and the web kiosk app.</p> <pre><code>{\n  \"condition\": \"'athanAlert' in topics &amp;&amp; 'lang-en' in topics\",\n  \"notification\": {\n    \"title\": \"Fajr - Athan\",\n    \"body\": \"Time for Fajr prayer\"\n  },\n  \"android\": {\n    \"notification\": {\n      \"channelId\": \"ANDROID_CHANNEL_ID_ATHAN_ALERTS\",\n      \"sound\": \"athan_full\"\n    }\n  },\n  \"apns\": {\n    \"payload\": {\n      \"aps\": {\n        \"sound\": \"athan_short.caf\"\n      }\n    }\n  },\n  \"data\": {\n    \"notificationType\": \"athan\",\n    \"topic\": \"athanAlert\"\n  }\n}\n</code></pre>"},{"location":"server-side/development/deployment/","title":"Deployment","text":"<p>This guide explains how to deploy Firebase Cloud Functions after you are done making changes.</p> <p>Ensure you either have access to the actual KIC Firebase project if you are an active maintainer or you have your own Firebase project set up and configured.</p> <p>Danger</p> <p>This is a guide on how to deploy to a production environment. Ensure you have properly tested all API routes, functions, and Firestore documents before proceeding, or that you are deploying to a sandbox environment.</p>"},{"location":"server-side/development/deployment/#emulator-testing","title":"Emulator Testing","text":"<p>Before deployment, ensure your functions run properly. Test functions locally before production.</p> <pre><code>npm run serve\n</code></pre> <p>Warning</p> <p>Firebase messaging always operates in production. If you send a notification in your emulator while testing to a live production topic, all your clients will receive that notification despite the function running in an emulator.</p>"},{"location":"server-side/development/deployment/#prerequisites","title":"Prerequisites","text":"<p>Start by ensuring you have the Firebase CLI installed and configured. If you tested your functions, this should already be installed, as the emulator also requires the Firebase CLI to be installed.</p> <pre><code>npm install -g firebase-tools\n</code></pre> <p>Once installed, you will also have to link the project to your Firebase project with:</p> <pre><code>firebase use --add\n</code></pre>"},{"location":"server-side/development/deployment/#deploy","title":"Deploy","text":"<p>Build the project.</p> <p>This also runs the linter, ensuring you do not have syntax or style mistakes within your project.</p> <pre><code>npm run build\n</code></pre> <p>Once built, you can deploy all the functions by running the deploy script:</p> <pre><code>npm run deploy\n</code></pre> <p>or by deploying each function individually:</p> <pre><code>firebase deploy --only functions:prayerTimesFetch\n</code></pre> <p>Once deployed, your changes should be live within your Firebase project. You can verify that everything went smoothly by reading the function logs.</p> <pre><code>npm run logs\n</code></pre> <p>\ud83c\udf89 Congratulations, you have deployed the Cloud Functions successfully.</p>"},{"location":"server-side/development/installation/","title":"Installation","text":"<p>This guide explains how to set up the cloud-functions repository for local development, configure Firebase, and run the project in an emulator before deployment.</p>"},{"location":"server-side/development/installation/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have the following installed and configured on your machine:</p> <p>Node.js v20+</p> <p>Required for running and building Firebase Cloud Functions.</p> <p>Firebase CLI</p> <p>Install it globally with:</p> <pre><code>npm install -g firebase-tools\n</code></pre> <p>Firebase Project Access</p> <p>You need access to either:</p> <ul> <li>The official KIC Firebase project (if you are a maintainer), or</li> <li>Your own Firebase project (for testing and development).</li> </ul>"},{"location":"server-side/development/installation/#repository-structure","title":"Repository Structure","text":"<p>The repository is structured as follows:</p> <pre><code>functions/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 announcementAlert.ts           # Sends notifications for new announcements\n\u2502   \u251c\u2500\u2500 prayerTimesAlertScheduler.ts   # Schedules daily prayer notifications\n\u2502   \u251c\u2500\u2500 sendPrayerAlert.ts             # Dispatches queued notifications\n\u2502   \u251c\u2500\u2500 prayerTimesFetch.ts            # HTTP endpoint for prayer times\n\u2502   \u2514\u2500\u2500 locale.json                    # Localization strings for notifications\n\u251c\u2500\u2500 package.json                       # NPM dependencies and scripts\n\u2514\u2500\u2500 tsconfig.json                      # TypeScript configuration\n</code></pre> <ul> <li>All Cloud Functions are written in TypeScript and located in the <code>src/</code> directory.</li> <li><code>locale.json</code> stores internationalized strings used in push notifications.</li> </ul>"},{"location":"server-side/development/installation/#setup-steps","title":"Setup Steps","text":""},{"location":"server-side/development/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Clone the repo from GitHub and navigate into the project folder:</p> <pre><code>git clone https://github.com/Kelowna-Islamic-Center/cloud-functions\ncd cloud-functions/functions\n</code></pre>"},{"location":"server-side/development/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<p>Install all required dependencies:</p> <pre><code>npm install\n</code></pre>"},{"location":"server-side/development/installation/#3-configure-firebase-environment","title":"3. Configure Firebase Environment","text":"<p>The functions depend on environment variables for API endpoints and notification channel IDs. Configure them with:</p> <pre><code>firebase functions:config:set \\\n  API_LINK=\"https://org.thebcma.com/api/Prayertimes/GetPrayertimeByDate?organizationId=7&amp;dt=\" \\\n  ISLAMIC_FINDER_API_LINK=\"https://www.islamicfinder.us/index.php/api/prayer_times?latitude=49.8863&amp;longitude=119.4966&amp;timezone=america/vancouver&amp;method=2&amp;juristic=0&amp;time_format=0&amp;date=\" \\\n  PRAYER_TIMES_FETCH_URL=\"https://prayertimesfetch-ilgk6gl75q-uc.a.run.app\" \\\n  ANDROID_CHANNEL_ID_ATHAN_ALERTS=\"athan_alert_channel\" \\\n  ANDROID_CHANNEL_ID_ANNOUNCEMENTS=\"announcements_channel\" \\\n  ANDROID_CHANNEL_ID_IQAMAH_ALERTS=\"iqamah_alert_channel\"\n</code></pre> <p>Verify the configuration was set correctly:</p> <pre><code>firebase functions:config:get\n</code></pre>"},{"location":"server-side/development/installation/#4-run-locally-emulator","title":"4. Run Locally (Emulator)","text":"<p>To emulate the functions locally:</p> <pre><code>npm run serve\n</code></pre> <p>This will start the Firebase Emulator Suite, allowing you to test HTTP-triggered and scheduled functions before deploying.</p> <p>Warning</p> <p>Firebase messaging always operates in production. If you send a notification while testing in the emulator, all subscribed clients will still receive it. Be careful when working with notification-related functions.</p>"},{"location":"server-side/development/installation/#emulator-testing-workflow","title":"Emulator Testing Workflow","text":"<p>The Firebase Emulator allows you to test each function before deploying. Below are examples of how to test the main functions included in this project.</p>"},{"location":"server-side/development/installation/#1-testing-prayertimesfetch-http-function","title":"1. Testing <code>prayerTimesFetch</code> (HTTP Function)","text":"<p>Once the emulator is running, you should see a link in your terminal for testing this function. Open this link in your browser or by querying it through <code>curl</code> and you should see the response of the HTTP function.</p>"},{"location":"server-side/development/installation/#2-testing-announcementalert-firestore-trigger","title":"2. Testing <code>announcementAlert</code> (Firestore Trigger)","text":"<p>This function runs when a new announcement document is created.</p> <ol> <li>Open the Emulator UI (usually at http://127.0.0.1:4000).</li> <li>Navigate to Firestore \u2192 Add Document.</li> <li>Add a new document in the <code>announcements</code> collection.</li> </ol> <p>Warning</p> <p>Ensure you have configured a non-production notification channel (ex. announcmenetsDev) before testing this.</p> <p>The function will automatically trigger and attempt to send a notification. Check logs:</p> <pre><code>npm run logs\n</code></pre>"},{"location":"server-side/development/installation/#3-testing-prayertimesalertscheduler-scheduled-function","title":"3. Testing <code>prayerTimesAlertScheduler</code> (Scheduled Function)","text":"<p>Since schedules don\u2019t fire automatically in the emulator, you need to invoke this manually:</p> <pre><code>firebase functions:shell\n</code></pre> <p>Inside the shell, run:</p> <pre><code>prayerTimesAlertScheduler()\n</code></pre> <p>This simulates the daily scheduled execution. You should see log output showing that notifications were queued.</p>"},{"location":"server-side/development/installation/#4-testing-sendprayeralert-task-queue-function","title":"4. Testing <code>sendPrayerAlert</code> (Task Queue Function)","text":"<p>This function is normally triggered by the scheduler, but you can also invoke it manually:</p> <pre><code>firebase functions:shell\n</code></pre> <pre><code>sendPrayerAlert({ # You params })\n</code></pre> <p>The function will simulate sending a localized prayer alert.</p>"},{"location":"server-side/development/installation/#next-steps","title":"Next Steps","text":"<p>Once installation and local testing are complete, follow the Deployment Guide to push your changes to Firebase.</p>"}]}